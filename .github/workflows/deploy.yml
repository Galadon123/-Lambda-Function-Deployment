name: Push Docker and Deploy Lambda

on:
  push:
    branches:
      - main
    paths:
      - 'deploy-in-lambda/**'
  workflow_run:
    workflows: ["Pulumi Infra Setup"]
    types:
      - completed

jobs:
  push_docker_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download Pulumi outputs from S3
        run: |
          aws s3 cp s3://${{ needs.Pulumi_Infra_Setup.outputs.bucket_name }}/pulumi-outputs.json ./outputs.json

      - name: Parse Pulumi outputs
        id: parse_outputs
        run: |
          ECR_REPO_URL=$(jq -r '.ecr_repo_url' ./outputs.json)
          ECR_REGISTRY=$(jq -r '.ecr_registry' ./outputs.json)
          LAMBDA_ROLE_ARN=$(jq -r '.lambda_role_arn' ./outputs.json)
          PRIVATE_SUBNET_ID=$(jq -r '.private_subnet_id' ./outputs.json)
          SECURITY_GROUP_ID=$(jq -r '.lambda_security_group_id' ./outputs.json)
          GRAFANA_TEMPO_PRIVATE_IP=$(jq -r '.ec2_instance_private_ip' ./outputs.json)
          LAMBDA_FUNCTION_NAME=$(jq -r '.lambda_function_name' ./outputs.json)
          echo "ECR_REPO_URL=$ECR_REPO_URL" >> $GITHUB_ENV
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "LAMBDA_ROLE_ARN=$LAMBDA_ROLE_ARN" >> $GITHUB_ENV
          echo "PRIVATE_SUBNET_ID=$PRIVATE_SUBNET_ID" >> $GITHUB_ENV
          echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV
          echo "GRAFANA_TEMPO_PRIVATE_IP=$GRAFANA_TEMPO_PRIVATE_IP" >> $GITHUB_ENV
          echo "LAMBDA_FUNCTION_NAME=$LAMBDA_FUNCTION_NAME" >> $GITHUB_ENV

     